{"version":3,"sources":["logo.svg","components/Tile.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","x","y","state","isStart","isSelected","className","this","typeOfSquare","React","Component","Grid","activeTilesInRow","numberOfRows","gridMatrix","horizontalRow","counter","rowTiles","emptyFirstIndex","xCoord","Math","floor","push","grid","renderGrid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sQAAe,I,2BC6BAA,E,kDAvBX,WAAYC,GAAO,IAAD,uBACd,cAAMA,IACOA,MAAMC,EACX,EAAKD,MAAME,EAHL,OAId,EAAKC,MAAQ,CACTC,SAAQ,EACRC,YAAW,GAND,E,0CAUlB,WACI,OACI,wBAAQC,UAAW,UAAYC,KAAKP,MAAMQ,aAA1C,SACI,8BAAID,KAAKP,MAAMC,EAAf,IAAmBM,KAAKP,MAAME,W,GAf3BO,IAAMC,WC2EVC,E,kDA1EX,WAAYX,GAAO,uCACTA,G,8CAUV,SAAWY,EAAkBC,GAQzB,IALA,IAAIC,EAAa,GACbC,GAAgB,EAChBC,EAAU,EAGLd,EAAIW,EAAa,EAAGX,GAAK,EAAGA,IAAI,CACrC,IAAIe,EAAW,GACXC,OAAe,EAGfA,IADAH,EAOJ,IAAK,IAAId,EAAI,EAAGA,EAAI,EAAEW,EAAiB,EAAGX,IAAI,CAC1C,IAAIkB,EAASC,KAAKC,MAAMpB,EAAE,GACvBiB,EAECD,EAASK,KAAK,cAAC,EAAD,CAAMd,aAAa,OAAON,EAAGA,MAG3Ce,EAASK,KAAK,cAAC,EAAD,CACVd,aAAa,OAEbP,EAAGkB,EACHjB,EAAGA,GAFEc,IAITA,KAGJE,GAAmBA,EAGvBH,GAAiBA,EACjBD,EAAWQ,KAAK,8BAAML,KAG1B,OACI,qBAAKX,UAAU,OAAf,SACKQ,M,oBAKb,WAEI,IAEMS,EAAOhB,KAAKiB,WADE,EADH,IAGjB,OACI,qBAAKlB,UAAU,iBAAf,SACKiB,Q,GArEEd,IAAMC,WCsCVe,E,4JAlCb,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,Y,GANQI,aCOHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6643efd2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport \"./Tile.css\"\n\nclass Tile extends React.Component{\n\n    constructor(props){\n        super(props);\n        let x = this.props.x;\n        let y = this.props.y;\n        this.state = {\n            isStart:false,\n            isSelected:false,\n        };\n    }\n\n    render(){\n        return (\n            <button className={\"square \" + this.props.typeOfSquare}>\n                <p>{this.props.x} {this.props.y}</p>\n                {/* <button>\n                </button> */}\n            </button>\n    \n        );\n    }\n\n};\n\nexport default Tile;","import React from \"react\";\nimport Tile from \"./Tile\";\n\nclass Grid extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        // this.state = {\n        //     isSelected:false,\n        // };\n    }\n\n\n\n\n    renderGrid(activeTilesInRow, numberOfRows) {\n        //activeTilesInRow is the lower number of the active rows. In this case, it is 5.\n        //TODO - change to map\n        let gridMatrix = [];\n        let horizontalRow = true;\n        let counter = 0;\n\n        //Loop through the y (how tall the grid is)\n        for (let y = numberOfRows-1; y > -1; y--){\n            let rowTiles = [];\n            let emptyFirstIndex;\n            //Determine if it is the horizontal row (car facing horizontal)\n            if (horizontalRow){\n                emptyFirstIndex = true;\n            }\n            else{\n                emptyFirstIndex = false;\n            }\n            //Create the empty and active tile cells in a specific row\n            for (let x = 0; x < 2*activeTilesInRow+1; x++){\n                let xCoord = Math.floor(x/2)\n                if(emptyFirstIndex){\n                    //REMOVE Y COORD DISPLAY\n                    rowTiles.push(<Tile typeOfSquare=\"dead\" y={y}/>)\n                }\n                else{\n                    rowTiles.push(<Tile \n                        typeOfSquare=\"live\" \n                        key={counter} \n                        x={xCoord} \n                        y={y}\n                        />)\n                    counter++;\n\n                }\n                emptyFirstIndex = !emptyFirstIndex\n\n            }\n            horizontalRow = !horizontalRow\n            gridMatrix.push(<div>{rowTiles}</div>)\n        }\n\n        return(\n            <div className=\"grid\">\n                {gridMatrix}\n            </div>\n        )\n    };\n\n    render(){\n        //Change variables\n        const rowCount = 15;\n        const columnCount = 5;\n        const grid = this.renderGrid(columnCount, rowCount)\n        return (\n            <div className=\"grid-container\">\n                {grid}\n            </div>\n        )\n    }\n\n};\n\nexport default Grid;","import logo from './logo.svg';\nimport './App.css';\nimport Grid from './components/Grid';\nimport { Component } from 'react';\n\nclass App extends Component{\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Grid/>\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}