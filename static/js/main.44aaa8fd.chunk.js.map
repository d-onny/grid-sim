{"version":3,"sources":["logo.svg","components/Tile.js","components/Border.js","components/DeadSquare.js","components/Grid.js","App.js","components/VerticalList.js","reportWebVitals.js","index.js"],"names":["items","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","item","slice","getSuggestionValue","suggestion","renderSuggestion","Tile","props","handleSelect","choice","index","setState","currentItem","onChange","event","newValue","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","x","y","state","isStart","isSelected","this","inputProps","placeholder","id","React","Component","Border","defaultColor","selectedColor","onClick","currentColor","changeColor","selected","prevState","color","className","orientation","style","background","DeadSquare","Grid","activeTilesInRow","numberOfRows","gridMatrix","horizontalRow","counter","rowTiles","emptyFirstIndex","Math","floor","push","Container","fluid","grid","renderGrid","App","updateSteps","newSteps","steps","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44aaa8fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport \"./Tile.css\"\nimport theme from \"./Tile.css\"\nimport Autosuggest from \"react-autosuggest\";\n\nconst items = [\n    {name: \"gas1\"},\n    {name: \"gas2\"},\n    {name: \"gas3\"},\n    {name: \"flower\"},\n    {name: \"club\"},\n    {name: \"coffee\"},\n    {name: \"juice\"},\n    {name: \"sandwich\"},\n    {name: \"taco\"},\n    {name: \"spaghetti\"},\n    {name: \"fair\"},\n    {name: \"theater\"},\n    {name: \"dance\"},\n    {name: \"plane\"},\n    {name: \"shopping\"},\n    {name: \"home\"},\n    {name: \"ring\"},\n\n]\n\n\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n  \n    return inputLength === 0 ? [] : items.filter(item =>\n      item.name.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n  \n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = suggestion => suggestion.name;\n  \n  // Use your imagination to render suggestions.\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\nclass Tile extends React.Component{\n\n    constructor(props){\n        super(props);\n        let x = this.props.x;\n        let y = this.props.y;\n        this.state = {\n            isStart:false,\n            isSelected:false,\n            currentItem: null,\n            value: '',\n            suggestions: []\n            // background: \"green\"\n          };\n    }\n\n    handleSelect = (choice) => {\n        if (choice.index > 0){\n            this.setState({currentItem: choice.value})\n        }\n    }\n\n    onChange = (event, { newValue }) => {\n        this.setState({\n          value: newValue\n        });\n      };\n    \n      // Autosuggest will call this function every time you need to update suggestions.\n      // You already implemented this logic above, so just use it.\n      onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          suggestions: getSuggestions(value)\n        });\n      };\n    \n      // Autosuggest will call this function every time you need to clear suggestions.\n      onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n    \n\n    render(){\n        const { value, suggestions } = this.state;\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Tree',\n            value,\n            onChange: this.onChange\n        };\n        return (\n            <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            // onSuggestionHighlighted={true}\n            id={this.props.id} //doesnt work\n            // theme={theme}\n            // style={{background: this.state.background}}\n            \n          />\n                // {/* <p>{this.props.x} {this.props.y}</p> */}\n                // {/* <button>\n                // </button> */}\n    \n        );\n    }\n\n};\n\nexport default Tile;","import React, { useState } from \"react\";\nimport \"./Border.css\"\n\n\nclass Border extends React.Component {\n\n    defaultColor = \"lightblue\"\n    selectedColor = \"red\"\n\n    constructor(props){\n        super(props)\n        this.state = {\n            selected: false,\n            color: this.defaultColor\n            // orientation: \n        }\n    }\n\n\n    onClick = () => {\n        let currentColor = this.changeColor(!this.state.selected)\n        this.setState(prevState => ({\n            selected: !prevState.selected,\n            color: currentColor\n        }))\n    }\n\n    changeColor(isSelected){\n        if (isSelected){\n            return this.selectedColor\n        }\n        else{\n            return this.defaultColor\n        }\n    }\n\n    render(){\n        return(\n            <button \n            className={\"rect \" + this.props.orientation }\n            onClick={this.onClick}\n            style={{background: this.state.color}}>\n                \n            </button>\n\n        )\n    }\n\n}\n\nexport default Border;","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport \"./DeadSquare.css\"\n\nclass DeadSquare extends React.Component{\n\n    constructor(props){\n        super(props);\n        let x = this.props.x;\n        let y = this.props.y;\n        this.state = {\n            isStart:false,\n            isSelected:false,\n        };\n    }\n\n    render(){\n        return (\n            <button className={\"square\"}>\n            </button>\n    \n        );\n    }\n\n};\n\nexport default DeadSquare;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport Border from \"./Border\";\nimport DeadSquare from \"./DeadSquare\";\nimport { Container } from \"react-bootstrap\";\nclass Grid extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        // this.state = {\n        //     isSelected:false,\n        // };\n    }\n\n\n\n    renderGrid(activeTilesInRow, numberOfRows) {\n        //activeTilesInRow is the lower number of the active rows. In this case, it is 5.\n        //TODO - change to map\n        let gridMatrix = [];\n        let horizontalRow = true;\n        let counter = 0;\n\n        //Loop through the y (how tall the grid is)\n        for (let y = numberOfRows-1; y > -1; y--){\n            let rowTiles = [];\n            let emptyFirstIndex;\n            //Determine if it is the horizontal row (car facing horizontal)\n            if (horizontalRow){\n                emptyFirstIndex = true;\n            }\n            else{\n                emptyFirstIndex = false;\n            }\n            //Create the empty and active tile cells in a specific row\n            for (let x = 0; x < 2*activeTilesInRow+1; x++){\n                let xCoord = Math.floor(x/2)\n\n\n                if (horizontalRow){\n\n                }\n                \n\n                if(emptyFirstIndex){\n                    //REMOVE Y COORD DISPLAY\n                    if(horizontalRow){\n                        rowTiles.push(<DeadSquare/>)\n\n                    }\n                    else{\n                        rowTiles.push(<Tile id={y}/>)\n                    }\n                }\n                else{\n                    if(horizontalRow){\n                        rowTiles.push(<Border \n                            orientation=\"horizontal\" \n                            key={counter} \n                            />)\n                    }\n                    else{\n                        rowTiles.push(<Border \n                            orientation=\"vertical\" \n                            key={counter} \n                            />)\n                    }\n\n                    counter++;\n\n                }\n                emptyFirstIndex = !emptyFirstIndex\n\n            }\n            horizontalRow = !horizontalRow\n            // gridMatrix.push(<div className=\"row disp\">{rowTiles}</div>)\n            gridMatrix.push(<Container fluid>{rowTiles}</Container>)\n\n        }\n\n        return(\n            <div className=\"grid\">\n                {gridMatrix}\n            </div>\n        )\n    };\n\n    render(){\n        //Change variables\n        const rowCount = 15;\n        const columnCount = 5;\n        const grid = this.renderGrid(columnCount, rowCount)\n        return (\n            <div className=\"grid-container\">\n                {grid}\n            </div>\n        )\n    }\n\n};\n\nexport default Grid;","import logo from './logo.svg';\nimport './App.css';\nimport VerticalList from './components/VerticalList';\nimport Grid from './components/Grid';\nimport { Component } from 'react';\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      data: [],\n      steps: []\n    }\n  }\n\n  updateSteps = newSteps => {\n    this.setState({steps:newSteps})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          {/* <VerticalList \n            updateParent={this.updateSteps} \n            steps={this.state.steps}/> */}\n          <Grid steps={this.state.steps}/>\n        </div>\n        \n      </div>\n\n    )\n  }\n\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Grid from \"./Grid\";\n\nexport default class VerticalList extends React.Component {\n    constructor(props){\n        super(props);\n        let grid = 0;\n        this.state = {\n            items: this.getItems(10),\n            steps: []\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    //Handling new steps (if they are arranged/deleted/created)\n    handleNewStep(currentSteps) {\n      this.setState({\n        steps: currentSteps\n      })\n      this.props.updateParent(this.state.steps)\n    }\n\n    reorder(list, startIndex, endIndex) {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n      \n        return result;\n    };\n\n    getItems = count =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n    }));\n\n    getItemStyle(isDragging, draggableStyle){\n        let grid = this.grid;\n        return {\n            // some basic styles to make the items look a bit nicer\n            userSelect: \"none\",\n            padding: grid * 2,\n            margin: `0 0 ${grid}px 0`,\n          \n            // change background colour if dragging\n            background: isDragging ? \"lightgreen\" : \"grey\",\n          \n            // styles we need to apply on draggables\n            ...draggableStyle\n          }\n    }\n\n    getListStyle(isDraggingOver) {\n        return ({\n            background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n            padding: this.grid,\n            width: 250\n          })\n\n    }\n\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n          return;\n        }\n    \n        const items = this.reorder(\n          this.state.items,\n          result.source.index,\n          result.destination.index\n        );\n    \n        this.setState({\n          items\n        });\n      }\n\n      render(){\n\n          return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {(provided, snapshot) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={this.getListStyle(snapshot.isDraggingOver)}\n                >\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={this.getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          {item.content}\n                        </div>\n                      )}\n                \n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          );\n      }\n\n    \n\n\n\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}