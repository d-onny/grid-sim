{"version":3,"sources":["logo.svg","components/Tile.js","components/Border.js","components/DeadSquare.js","components/Grid.js","components/GenerateCodeButton.js","components/VerticalList.js","App.js","reportWebVitals.js","index.js"],"names":["items","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","item","slice","getSuggestionValue","suggestion","renderSuggestion","Tile","props","handleSelect","choice","index","setState","currentItem","onChange","event","newValue","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","x","y","state","isStart","isSelected","this","parentStateMap","updateGrid","row","inputProps","placeholder","id","React","Component","Border","defaultColor","selectedColor","onClick","currentColor","changeColor","selected","prevState","color","data","className","orientation","style","background","DeadSquare","Grid","keyCount","gridRowStates","Map","renderedGrid","changeGridRowState","bind","activeTilesInRow","numberOfRows","gridMatrix","gridState","horizontalRow","console","log","rowTiles","rowState","emptyFirstIndex","Math","floor","push","getKey","Container","fluid","set","size","newMapToSet","currentGridRowState","currentRow","get","grid","renderGrid","GenerateCodeButton","currentGrid","gridSize","itemLocations","walls","letterRowAsciiValue","rowNumber","letterRow","String","fromCharCode","Boolean","currentRowObject","toGridPoint","currentPoint","currentGridPoint","toString","generateHash","code","mapDetails","mapDetailsString","JSON","stringify","mapDetailsEncode","btoa","readonly","type","App","newGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98845a4c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport \"./Tile.css\"\nimport theme from \"./Tile.css\"\nimport Autosuggest from \"react-autosuggest\";\n\nconst items = [\n    {name: \"gas1\"},\n    {name: \"gas2\"},\n    {name: \"gas3\"},\n    {name: \"flower\"},\n    {name: \"club\"},\n    {name: \"coffee\"},\n    {name: \"juice\"},\n    {name: \"sandwich\"},\n    {name: \"taco\"},\n    {name: \"spaghetti\"},\n    {name: \"fair\"},\n    {name: \"theater\"},\n    {name: \"dance\"},\n    {name: \"plane\"},\n    {name: \"shopping\"},\n    {name: \"home\"},\n    {name: \"ring\"},\n\n]\n\n\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n  \n    return inputLength === 0 ? [] : items.filter(item =>\n      item.name.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n  \n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = suggestion => suggestion.name;\n  \n  // Use your imagination to render suggestions.\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\nclass Tile extends React.Component{\n\n    constructor(props){\n        super(props);\n        let x = this.props.x;\n        let y = this.props.y;\n        this.state = {\n            isStart:false,\n            isSelected:false,\n            currentItem: null,\n            value: '',\n            suggestions: []\n            // background: \"green\"\n          };\n    }\n\n    handleSelect = (choice) => {\n        if (choice.index > 0){\n            this.setState({currentItem: choice.value})\n        }\n\n    }\n\n    onChange = (event, { newValue }) => {\n        this.setState({\n          value: newValue\n        });\n      };\n    \n      // Autosuggest will call this function every time you need to update suggestions.\n      // You already implemented this logic above, so just use it.\n      onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          suggestions: getSuggestions(value)\n        });\n      };\n    \n      // Autosuggest will call this function every time you need to clear suggestions.\n      onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n    \n\n    render(){\n        const { value, suggestions } = this.state;\n        let parentStateMap = {item: this.state.value}\n        this.props.updateGrid(this.props.row, this.props.index, parentStateMap)\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: '',\n            value,\n            onChange: this.onChange\n        };\n        return (\n            <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            // onSuggestionHighlighted={true}\n            id={this.props.id} //doesnt work\n            // theme={theme}\n            // style={{background: this.state.background}}\n            \n          />\n                // {/* <p>{this.props.x} {this.props.y}</p> */}\n                // {/* <button>\n                // </button> */}\n    \n        );\n    }\n\n};\n\nexport default Tile;","import React, { useState } from \"react\";\nimport \"./Border.css\"\n\n\nclass Border extends React.Component {\n\n    defaultColor = \"lightblue\"\n    selectedColor = \"red\"\n\n    constructor(props){\n        super(props)\n        this.state = {\n            selected: false,\n            color: this.defaultColor,\n            data: this.props\n            // orientation: \n        }\n    }\n\n\n    onClick = () => {\n        let currentColor = this.changeColor(!this.state.selected)\n        this.setState(prevState => ({\n            selected: !prevState.selected,\n            color: currentColor\n        }))\n        let parentStateMap = {selected: !this.state.selected}\n        // console.log(this.state.selected)\n        this.props.updateGrid(this.props.row, this.props.index, parentStateMap)\n    }\n\n    changeColor(isSelected){\n        if (isSelected){\n            return this.selectedColor\n        }\n        else{\n            return this.defaultColor\n        }\n    }\n\n    render(){\n        return(\n            <button \n            className={\"rect \" + this.props.orientation }\n            onClick={this.onClick}\n            style={{background: this.state.color}}>\n                \n            </button>\n\n        )\n    }\n\n}\n\nexport default Border;","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport \"./DeadSquare.css\"\n\nclass DeadSquare extends React.Component{\n\n    constructor(props){\n        super(props);\n        let x = this.props.x;\n        let y = this.props.y;\n        this.state = {\n            isStart:false,\n            isSelected:false,\n        };\n    }\n\n    render(){\n        return (\n            <button className={\"square\"}>\n            </button>\n    \n        );\n    }\n\n};\n\nexport default DeadSquare;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport Border from \"./Border\";\nimport DeadSquare from \"./DeadSquare\";\nimport { Container } from \"react-bootstrap\";\nclass Grid extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.keyCount=0\n\n        this.state = {\n            gridRowStates: new Map(),\n            renderedGrid: null\n        };\n\n        this.changeGridRowState = this.changeGridRowState.bind(this);\n    }\n\n    getKey(){\n        return this.keyCount++;\n    }\n\n\n    renderGrid(activeTilesInRow, numberOfRows) {\n        //activeTilesInRow is the lower number of the active rows. In this case, it is 5.\n        //TODO - change to map\n        let gridMatrix = [];\n        let gridState = new Map();\n\n        let horizontalRow = true;\n        let counter = 0;\n        console.log(\"asdasdas\")\n\n        //Loop through the y (how tall the grid is)\n        for (let y = numberOfRows-1; y > -1; y--){\n            let rowTiles = [];\n            let rowState = [];\n            let emptyFirstIndex;\n            //Determine if it is the horizontal row (car facing horizontal)\n            if (horizontalRow){\n                emptyFirstIndex = true;\n            }\n            else{\n                emptyFirstIndex = false;\n            }\n            //Create the empty and active tile cells in a specific row\n            for (let x = 0; x < 2*activeTilesInRow+1; x++){\n                let xCoord = Math.floor(x/2)\n\n\n                if (horizontalRow){\n\n                }\n                \n\n                if(emptyFirstIndex){\n                    //REMOVE Y COORD DISPLAY\n                    if(horizontalRow){\n                        rowTiles.push(<DeadSquare key={this.getKey()}\n                            row={y}\n                            index={x}/>)\n                        rowState.push({})\n\n                    }\n                    else{\n                        rowTiles.push(<Tile key={this.getKey()}\n                            row={y}\n                            index={x}\n                            updateGrid={this.changeGridRowState}/>)\n                        rowState.push({item: \"\"})\n                    }\n                }\n                else{\n                    if(horizontalRow){\n                        rowTiles.push(<Border \n                            orientation=\"horizontal\" \n                            key={this.getKey()}\n                            row={y}\n                            index={x}\n                            updateGrid={this.changeGridRowState}\n                            />)\n                        rowState.push({selected: false})\n                    }\n                    else{\n                        rowTiles.push(<Border \n                            orientation=\"vertical\" \n                            key={this.getKey()}\n                            row={y}\n                            index={x}\n                            updateGrid={this.changeGridRowState}\n                            />)\n                        rowState.push({selected: false})\n                    }\n\n                    // counter++;\n\n                }\n                emptyFirstIndex = !emptyFirstIndex\n\n            }\n            horizontalRow = !horizontalRow\n            // gridMatrix.push(<div className=\"row disp\">{rowTiles}</div>)\n            gridMatrix.push(<Container key={this.getKey()} fluid>{rowTiles}</Container>)\n            gridState.set(y, rowState);\n        }\n        if (this.state.gridRowStates.size === 0){\n            this.setState({gridRowStates : gridState})\n        }\n\n        return(\n            <div className=\"grid\">\n                {gridMatrix}\n            </div>\n        )\n    };\n\n    changeGridRowState(row, index, newMapToSet){ //Maybe add type as well?\n        let currentGridRowState = this.state.gridRowStates;\n\n        //set the value in currentGridRowState then set state by replacing\n        let currentRow = currentGridRowState.get(row);\n        currentRow[index] = newMapToSet;\n        currentGridRowState.set(row, currentRow);\n        this.setState({gridRowStates : currentGridRowState})\n        \n        //Update parent\n        this.props.updateGrid(this.state.gridRowStates)\n        console.log(this.state.gridRowStates)\n    }\n\n    componentDidMount(){\n        const rowCount = 15;\n        const columnCount = 5;\n        const grid = this.renderGrid(columnCount, rowCount)\n        this.setState({ renderedGrid: grid})\n    }\n\n    render(){\n        //Change variables\n\n        return (\n            <div className=\"grid-container\">\n                {this.state.renderedGrid}\n            </div>\n        )\n    }\n\n};\n\nexport default Grid;","import React from \"react\";\n\nclass GenerateCodeButton extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            code: \"\"\n            // orientation: \n        }\n    }\n\n    generateHash(mapDetails){\n        let mapDetailsString = JSON.stringify(mapDetails)\n        console.log(mapDetails)\n        let mapDetailsEncode = btoa(mapDetailsString)\n        this.setState({code: mapDetailsEncode})\n    }\n\n    onClick = () => {\n        let currentGrid = this.props.grid;\n        let gridSize = currentGrid.size\n        let itemLocations =  {}\n        let walls = []\n        let letterRowAsciiValue = 65 //ascii value for \"A\"\n\n\n        for (let rowNumber = 0; rowNumber < gridSize; rowNumber++){\n            let currentRow = currentGrid.get(rowNumber)\n            let letterRow = String.fromCharCode(letterRowAsciiValue)\n            \n            let horizontalRow = !Boolean(rowNumber%2) //else it is a vertical row\n\n            for (let index = 0; index < currentRow.length; index++){\n                let selectedCounter = 0;\n                let currentRowObject = currentRow[index]\n                let toGridPoint = \"\"\n                let currentPoint = Math.floor(index/2) + 1\n                if (currentRowObject.selected){\n                    let currentGridPoint = letterRow + currentPoint.toString()\n                    if (horizontalRow){\n                        toGridPoint = letterRow + (currentPoint+1).toString()\n\n                    }\n                    else{\n                        //This means the selected is a vertical wall\n                        toGridPoint = String.fromCharCode(letterRowAsciiValue+1) + currentPoint.toString()\n\n                    }\n                    walls.push([currentGridPoint, toGridPoint])\n\n                }\n                else if (currentRowObject.item){\n                    //Add toLowercase eventually\n                    itemLocations[currentRowObject.item] = letterRow + currentPoint\n                }\n            }\n\n            if (!horizontalRow){\n                letterRowAsciiValue++;\n            }\n        }\n        this.generateHash({walls: walls, items: itemLocations})\n    }\n\n\n    render(){\n        return(\n            <div>\n                <button\n                onClick={this.onClick}>\n                    Generate code\n                </button>\n                \n                <form>\n                    <label>\n                    \n                    <input readonly type=\"text\" value={this.state.code}/>\n                    </label>\n                </form>\n            </div>\n        )\n    }\n}\n\n// const GenerateCodeButton = props => {\n//     return (\n//         <div> \n//             <button>\n\n//             </button>\n//         </div>\n//     )\n// }\n\nexport default GenerateCodeButton;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Grid from \"./Grid\";\n\nexport default class VerticalList extends React.Component {\n    constructor(props){\n        super(props);\n        let grid = 0;\n        this.state = {\n            items: this.getItems(10),\n            steps: []\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    //Handling new steps (if they are arranged/deleted/created)\n    handleNewStep(currentSteps) {\n      this.setState({\n        steps: currentSteps\n      })\n      this.props.updateParent(this.state.steps)\n    }\n\n    reorder(list, startIndex, endIndex) {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n      \n        return result;\n    };\n\n    getItems = count =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n    }));\n\n    getItemStyle(isDragging, draggableStyle){\n        let grid = this.grid;\n        return {\n            // some basic styles to make the items look a bit nicer\n            userSelect: \"none\",\n            padding: grid * 2,\n            margin: `0 0 ${grid}px 0`,\n          \n            // change background colour if dragging\n            background: isDragging ? \"lightgreen\" : \"grey\",\n          \n            // styles we need to apply on draggables\n            ...draggableStyle\n          }\n    }\n\n    getListStyle(isDraggingOver) {\n        return ({\n            background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n            padding: this.grid,\n            width: 250\n          })\n\n    }\n\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n          return;\n        }\n    \n        const items = this.reorder(\n          this.state.items,\n          result.source.index,\n          result.destination.index\n        );\n    \n        this.setState({\n          items\n        });\n      }\n\n      render(){\n\n          return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {(provided, snapshot) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={this.getListStyle(snapshot.isDraggingOver)}\n                >\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={this.getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          {item.content}\n                        </div>\n                      )}\n                \n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          );\n      }\n\n    \n\n\n\n\n}","import logo from './logo.svg';\nimport './App.css';\nimport VerticalList from './components/VerticalList';\nimport Grid from './components/Grid';\nimport { Component } from 'react';\nimport GenerateCodeButton from './components/GenerateCodeButton';\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      data: [],\n      grid: []\n    }\n  }\n\n  updateGrid = newGrid => {\n    this.setState({grid:newGrid})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          {/* <VerticalList \n            updateParent={this.updateSteps} \n            steps={this.state.steps}/> */}\n          <Grid updateGrid={this.updateGrid}/>\n        </div>\n        <div className=\"container\">\n          <GenerateCodeButton grid={this.state.grid}/>\n\n        </div>\n      \n      </div>\n\n    )\n  }\n\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}